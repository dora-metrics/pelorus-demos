apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: basic-python-template
parameters:
  - name: NAMESPACE
    description: The namespace the various objects will be deployed in.
    value: basic-python
  - name: APPLICATION_NAME
    description: The name for the application.
    value: basic-python-app
  # TODO break in org + repo to be easier to use from forks
  - name: PROJECT_URI
    description: "Project URI with the basic-python app"
    value: https://github.com/dora-metrics/pelorus-demos
  - name: PROJECT_REF
    description: "Project ref with the basic-python app"
    value: master
objects:
  - kind: Namespace
    apiVersion: v1
    metadata:
      name: ${NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
    spec:
      triggers:
      - type: GitHub
        github:
          secret: 4Xwu0tyAab90aaoasd88qweAasdaqvjknfrl3qwpo
      - type: Generic
        generic:
          secret: 4Xwu0tyAab90aaoasd88qweAasdaqvjknfrl3qwpo
      - type: ConfigChange
      - type: ImageChange
        imageChange: {}
      source:
        type: Git
        git:
          uri: ${PROJECT_URI}
          ref: ${PROJECT_REF}
        contextDir: "basic-python"
      strategy:
        sourceStrategy:
          from:
            # TODO use dockerfile to speed up build
            kind: "ImageStreamTag"
            name: "python-39:latest"
      output:
        to:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: python-39
      namespace: ${NAMESPACE}
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations: null
        from:
          kind: DockerImage
          name: registry.access.redhat.com/ubi9/python-39:latest
        generation: 1
        importPolicy: {}
        name: latest
        referencePolicy:
          type: Source
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
        app.kubernetes.io/instance: ${APPLICATION_NAME}-build
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ${APPLICATION_NAME}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-build-pvc
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
        app.kubernetes.io/instance: ${APPLICATION_NAME}-build
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ${APPLICATION_NAME}
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 500Mi
  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
        app.kubernetes.io/instance: ${APPLICATION_NAME}-deployment
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      annotations:
        description: Route for application's http service.
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
        app.kubernetes.io/instance: ${APPLICATION_NAME}-deployment
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ${APPLICATION_NAME}
    spec:
      to:
        name: ${APPLICATION_NAME}
  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: ${APPLICATION_NAME}
        app.kubernetes.io/instance: ${APPLICATION_NAME}-deployment
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app.kubernetes.io/name: ${APPLICATION_NAME}
            app.kubernetes.io/instance: ${APPLICATION_NAME}-deployment
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: ${APPLICATION_NAME}
            deploymentConfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: ${APPLICATION_NAME}
              env:
                - name: APP_FILE
                  value: example.py
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              readinessProbe:
                exec:
                  command: [/bin/bash, -c, curl -s 'http://localhost:8080']
          terminationGracePeriodSeconds: 60
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
        - type: ConfigChange
